# !/usr/bin/env python
#
# Copyright (c) 2013, Luke Southam <luke@devthe.com>
# All rights reserved.
# http://opensource.org/licenses/BSD-3-Clause
"""
OOP method routes for Bottle.

Allows the creation of object like webapp2.RequestHandler to route requests
via method.

USAGE:
    >>> from bottle-methods import Methods, app

    >>> class IndexHandler(Methods):
    ...     route = '/'
    ...     def get(self):
    ...         return "Hello World"

    >>> app.run(host='localhost', port=8080)
"""
from bottle import Bottle

# The HTTP methods allowed
# Lower case for PEP8 python method names
METHODS = ["get", "post", "put", "delete"]

class MethodsMeta(type):
    def __new__(cls, name, bases, attrs):
        """Searches through the class's attrs for methods with the same name as HTTP ones.
        adds the bottle.request decorator to them. The route is set via self.route ."""
        if 'route' in attrs: # to allow inheritance
            # Get the given route
            route = attrs['route']

            # Go through the classes attributes
            for key, value in attrs.iteritems():
                # Only add decorator if HTTP method.
                # Allow uppercase methods but don't recommend it.
                if key.lower() in METHODS:
                    # Allows self arg in methods otherwise not passed
                    add_cls = lambda *args, **kwargs: value(cls, *args, **kwargs)
                    # Add the decorator here, also the 'value' funtion is modifyed
                    # based on the last comment.
                    attrs[key] = app.route(route, method=key.upper())(add_cls)
        return super(MethodsMeta, cls).__new__(cls, name, bases, attrs)

class Methods(object):
    """Used to inherit the metaclass"""
    __metaclass__ = MethodsMeta

app = Bottle()
